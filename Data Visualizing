pip install s3fs
import boto3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
import numpy as np
import io
import s3fs

y_true = df['star_rating']
y_pred = df['prediction'] 
conf_mat = confusion_matrix(y_true, y_pred)


plt.figure(figsize=(10, 6))
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()


img_data = io.BytesIO()


plt.savefig(img_data, format='png', bbox_inches='tight')
img_data.seek(0)


# Connect to the s3fs file system
s3 = s3fs.S3FileSystem(anon=False)  


# Change 'my-data-bucket-rh' to your actual bucket name and provide the full path where you want to save the file.
bucket_path = 's3://my-big-data-project-jn/confusion_matrix.png'


with s3.open(bucket_path, 'wb') as f:
    f.write(img_data.getbuffer())

df = test_results.select('star_rating','prediction').toPandas()


sns.set_style("white")
 
# Create a relationship plot between star rating and prediction
sns.lmplot(x='star_rating', y='prediction', data=df)


img_data = io.BytesIO()


plot.savefig(img_data, format='png', bbox_inches='tight')
img_data.seek(0)


s3 = s3fs.S3FileSystem(anon=False)  


bucket_path = 's3://my-big-data-project-jn/star_rating_And_prediction.png'

plt.figure(figsize=(10, 5))
sns.countplot(x='star_rating', data=df)
plt.title('Distribution of Star Ratings')
plt.xlabel('Star Ratings')
plt.ylabel('Count')
plt.show()


img_data = io.BytesIO()


plt.savefig(img_data, format='png', bbox_inches='tight')
img_data.seek(0)  


s3 = s3fs.S3FileSystem(anon=False)  


bucket_path = 's3://my-big-data-project-jn/star_rating_distribution.png'


with s3.open(bucket_path, 'wb') as f:
    f.write(img_data.getvalue())

df_predictions = test_results.toPandas()
conf_mat = confusion_matrix(df_predictions['label'], df_predictions['prediction'])
plt.figure(figsize=(10, 6))
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()


img_data = io.BytesIO()


plt.savefig(img_data, format='png', bbox_inches='tight')
img_data.seek(0)  


s3 = s3fs.S3FileSystem(anon=False)  


bucket_path = 's3://my-big-data-project-jn/confusion_matrix2.png'


with s3.open(bucket_path, 'wb') as f:
    f.write(img_data.getvalue())
